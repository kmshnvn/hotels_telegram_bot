from datetime import date, timedelta

from loguru import logger
from telegram_bot_calendar import DetailedTelegramCalendar
from telebot.types import Message, CallbackQuery

from loader import bot
from database.model import User
from database.states import SortPrice
from config_data.config import RUSTEP
from database.database import db_get_value


def check_in(message: Message) -> None:
    """    –§—É–Ω–∫—Ü–∏—è, –°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∑–∞–µ–∑–¥–∞    """

    calendar, step = DetailedTelegramCalendar(
        calendar_id=1, locale='ru', min_date=date.today()
    ).build()

    bot.send_message(message.chat.id,
                     f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:\n"
                     f"\n–í—ã–±–µ—Ä–∏—Ç–µ {RUSTEP[step]}",
                     reply_markup=calendar)

    logger.info(f'{message.chat.id} - –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞')


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
def callback_check_in(call: CallbackQuery) -> None:
    """    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∑–∞–µ–∑–¥–∞    """

    result, key, step = DetailedTelegramCalendar(
        calendar_id=1, locale='ru', min_date=date.today()
    ).process(call.data)

    try:
        if not result and key:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {RUSTEP[step]}",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=key)

        elif result:
            result_date = result.strftime('%d.%m.%Y')
            bot.edit_message_text(f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {result_date}",
                                  call.message.chat.id,
                                  call.message.message_id)

            try:
                new = User.get(telegram_id=call.message.chat.id)
                new.check_in = result
                new.save()
            except Exception as error:
                logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î - {error}')

            check_out(call.message)

    except KeyError as error:
        logger.error(error)
        bot.send_message(call.message.chat.id,
                         'ü§¨–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')

        check_in(call.message)


def check_out(message: Message) -> None:
    """    –§—É–Ω–∫—Ü–∏—è, –°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –≤—ã–µ–∑–¥–∞    """

    calendar, step = DetailedTelegramCalendar(
        calendar_id=2, locale='ru',
        min_date=db_get_value(message.chat.id, 'check_in')
    ).build()

    bot.send_message(message.chat.id,
                     f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:\n"
                     f"\n–í—ã–±–µ—Ä–∏—Ç–µ {RUSTEP[step]}",
                     reply_markup=calendar)

    logger.info(f'{message.chat.id} - –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞')


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
def callback_check_in(call: CallbackQuery) -> None:
    """    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –≤—ã–µ–∑–¥–∞

    –í –∫–æ–Ω—Ü–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞
    """

    check_out_date = db_get_value(call.message.chat.id, 'check_in') + timedelta(days=1)

    result, key, step = DetailedTelegramCalendar(
        calendar_id=2, locale='ru',
        min_date=check_out_date
    ).process(call.data)

    try:
        if not result and key:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {RUSTEP[step]}",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=key)
        elif result:
            result_date = result.strftime('%d.%m.%Y')

            bot.edit_message_text(f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {result_date}",
                                  call.message.chat.id,
                                  call.message.message_id)

            try:
                new = User.get(telegram_id=call.message.chat.id)
                new.check_out = result
                new.save()
            except Exception as error:
                logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î - {error}')

            user_state = db_get_value(call.message.chat.id, 'command_name')

            if user_state == '/bestdeal':
                bot.set_state(call.message.chat.id, SortPrice.bestdeal_city)

                bot.send_message(
                    chat_id=call.message.chat.id,
                    text='–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ $ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
            else:
                bot.set_state(call.message.chat.id, SortPrice.find_city)
                bot.send_message(call.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–µ—Å—Ç–∏?')

    except KeyError as error:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ - {error}')
        bot.send_message(call.message.chat.id,
                         '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        check_out(call.message)
