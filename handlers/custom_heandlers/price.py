from typing import List, Dict

from datetime import date, timedelta
from telebot.types import Message, CallbackQuery, InputMediaPhoto
from loguru import logger
from telegram_bot_calendar import DetailedTelegramCalendar, RUSTEP

from loader import bot
from states.states import SortPrice
from database.users import User as user
from database.database import db_get_user, db_get_value
from utils.funcs import hotel_description
from api.request_api import api_get_hotels, api_get_photo, get_city_api
from keyboards.inline_keyboards import city_markup, request_photo, hotel_link, test_keyboard


@bot.message_handler(commands=['lowprice', 'highprice'])
def price(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /lowprice –∏ /highprice

     –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –∞ —Ç–∞–∫–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     –≤ –ë–î, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞

    :param message:
    :return:
    """

    try:
        new = user.get(telegram_id=message.chat.id)
        new.command_name = message.text
        new.hotels_count = 10
        new.photo_count = 10
        new.save()
    except Exception as error:
        logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î - {error}')

    bot.set_state(message.from_user.id, SortPrice.start, message.chat.id)
    bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—â–µ–º –æ—Ç–µ–ª—å?')


@bot.message_handler(state=SortPrice.start)
def check_city(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —É—Ç–æ—á–Ω—è–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    :param message:
    :return:
    """

    if message.text.isalpha():
        bot.send_chat_action(message.chat.id, 'typing')
        city_list: List[Dict] = get_city_api(message.text)
        if city_list:
            bot.send_message(message.chat.id, '–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:',
                             reply_markup=city_markup(city_list))
            bot.set_state(message.from_user.id, SortPrice.find_city, message.chat.id)

        else:
            bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞')
    else:
        bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã')


@bot.callback_query_handler(func=lambda call: call.data.startswith('city#'))
def callback_city(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "city#"
    –ë–æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫
    –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å –≥–æ—Ä–æ–¥–∞ –ø–æ–∏—Å–∫–∞ –∏ –µ–≥–æ id –≤ –ë–î

    :param call:
    :return:
    """

    try:
        search_city: str = ''
        callback, city_id = call.data.split('#')

        for element in call.message.json['reply_markup']['inline_keyboard'][0]:
            if element['callback_data'] == call.data:
                search_city = element['text']

        bot.edit_message_text(
            text=f'–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞:\n{search_city}',
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
            )

        try:
            new = user.get(telegram_id=call.message.chat.id)
            new.search_city = search_city
            new.city_id = city_id
            new.save()
        except Exception as error:
            logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î - {error}')
        check_in(call.message)

    except Exception as ex:
        logger.error(ex)
        text: str = 'ü§¨–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.\n' \
                    '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞: '
        bot.send_message(call.message.chat.id, text)


def check_in(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∑–∞–µ–∑–¥–∞

    :param message:
    :return:
    """

    calendar, step = DetailedTelegramCalendar(
        calendar_id=1, locale='ru', min_date=date.today()
    ).build()

    bot.send_message(message.chat.id,
                     f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:\n"
                     f"\n–í—ã–±–µ—Ä–∏—Ç–µ {RUSTEP[step]}",
                     reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
def callback_check_in(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∑–∞–µ–∑–¥–∞

    :param call:
    :return:
    """

    result, key, step = DetailedTelegramCalendar(
        calendar_id=1, locale='ru', min_date=date.today()
    ).process(call.data)

    try:
        if not result and key:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {RUSTEP[step]}",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=key)

        elif result:
            result_date = result.strftime('%d.%m.%Y')
            bot.edit_message_text(f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {result_date}",
                                  call.message.chat.id,
                                  call.message.message_id)

            try:
                new = user.get(telegram_id=call.message.chat.id)
                new.check_in = result
                new.save()
            except Exception as error:
                logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î - {error}')

            check_out(call.message)
    except KeyError as error:
        logger.error(error)
        bot.send_message(call.message.chat.id,
                         'ü§¨–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        check_in(call.message)


def check_out(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –≤—ã–µ–∑–¥–∞

    :param message:
    :return:
    """

    calendar, step = DetailedTelegramCalendar(
        calendar_id=2, locale='ru',
        min_date=db_get_value(message.chat.id, 'check_in')
    ).build()

    bot.send_message(message.chat.id,
                     f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:\n"
                     f"\n–í—ã–±–µ—Ä–∏—Ç–µ {RUSTEP[step]}",
                     reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
def callback_check_in(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –≤—ã–µ–∑–¥–∞

    –í –∫–æ–Ω—Ü–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞

    :param call:
    :return:
    """

    check_out_date = db_get_value(call.message.chat.id, 'check_in') + timedelta(days=1)

    result, key, step = DetailedTelegramCalendar(
        calendar_id=2, locale='ru',
        min_date=check_out_date
    ).process(call.data)

    try:
        if not result and key:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {RUSTEP[step]}",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=key)
        elif result:
            result_date = result.strftime('%d.%m.%Y')

            bot.edit_message_text(f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {result_date}",
                                  call.message.chat.id,
                                  call.message.message_id)

            try:
                new = user.get(telegram_id=call.message.chat.id)
                new.check_out = result
                new.save()
            except Exception as error:
                logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î - {error}')
            bot.send_message(call.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–µ—Å—Ç–∏?')
            # get_city(call.message)
    except KeyError as error:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ - {error}')
        bot.send_message(call.message.chat.id,
                         '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        check_out(call.message)


@bot.message_handler(state=SortPrice.find_city)
def get_hotel_numbers(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥ —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è

    :param message:
    :return:
    """

    try:
        if message.text.isdigit():
            max_hotel_count: int = db_get_value(message.chat.id, 'hotels_count')

            if int(message.text) <= max_hotel_count:
                if int(message.text) > 0:
                    try:
                        new = user.get(telegram_id=message.chat.id)
                        new.hotels_count = message.text
                        new.save()
                    except Exception as error:
                        logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î - {error}')

                    bot.send_message(message.chat.id, '–ù—É–∂–Ω—ã —Ñ–æ—Ç–æ?', reply_markup=request_photo())
                    bot.set_state(message.from_user.id, SortPrice.hotel_numbers, message.chat.id)
                else:
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0'
                    )
            else:
                bot.send_message(
                    chat_id=message.chat.id,
                    text=f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_hotel_count}'
                )
        else:
            bot.send_message(message.chat.id, '–Ø –æ–∂–∏–¥–∞—é —Ü–∏—Ñ—Ä—É')
    except Exception as error:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª-–≤–∞ –æ—Ç–µ–ª–µ–π - {error}')
        bot.send_message('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π')


@bot.callback_query_handler(func=lambda call: call.data.startswith('photo#'))
def callback_photo(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "photo#"
    –ë–æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∏—Ö –∫–æ–ª-–≤–æ
    –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω—ã, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î

    :param call:
    :return:
    """

    try:
        callback, answer = call.data.split('#')

        if answer.lower() == '–¥–∞':
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f'–í—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ'
            )
            bot.send_message(call.message.chat.id, '–ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã–≤–µ—Å—Ç–∏?')
            bot.set_state(call.message.chat.id, SortPrice.photos)

        elif answer.lower() == '–Ω–µ—Ç':
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f'–§–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω—ã'
            )

            try:
                new = user.get(telegram_id=call.message.chat.id)
                new.photo_count = 0
                new.save()
            except Exception as error:
                logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î - {error}')

            output_data(call.message)
    except Exception as ex:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {ex}')
        bot.send_message(
            chat_id=call.message.chat.id,
            text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. \n–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω—ã —Ñ–æ—Ç–æ?'
        )


@bot.message_handler(state=SortPrice.photos)
def data_photos(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    :param message:
    :return:
    """
    try:
        if message.text.isdigit():
            max_photo_count: int = db_get_value(message.chat.id, 'photo_count')
            min_photo_count: int = 2

            if int(message.text) <= max_photo_count:
                if int(message.text) > min_photo_count:
                    try:
                        new = user.get(telegram_id=message.chat.id)
                        new.photo_count = message.text
                        new.save()

                        output_data(message)
                    except Exception as error:
                        logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î - {error}')
                        bot.send_message(chat_id=message.chat.id,
                                         text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.\n '
                                              '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã–≤–µ—Å—Ç–∏?')
                else:
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ {min_photo_count}'
                    )
            else:
                bot.send_message(
                    chat_id=message.chat.id,
                    text=f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_photo_count}'
                )
        else:
            bot.send_message(message.chat.id, '–Ø –æ–∂–∏–¥–∞—é —Ü–∏—Ñ—Ä—É')
    except Exception as error:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - {error}')
        bot.send_message('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')


def output_data(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –≥–æ—Ç–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    –ë–µ—Ä–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –∏—â–µ—Ç –≤—Å–µ –æ—Ç–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ,
    –≤—ã–≤–æ–¥–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    :param message:
    :return:
    """
    try:
        bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–∂–∏–¥–∞–π—Ç–µ')

        user_info: dict = db_get_user(message.chat.id)
        max_hotel_count: int = user_info['hotels_count'] * 4
        hotel_count = user_info['hotels_count']

        if user_info['command_name'] == '/lowprice':
            sorting: str = 'PRICE'
        elif user_info['command_name'] == '/highprice':
            sorting: str = 'PRICE_HIGHEST_FIRST'

        bot.send_chat_action(message.chat.id, 'typing')
        hotel_list_info: list = api_get_hotels(
            city_id=user_info['city_id'],
            sorting=sorting,
            check_in=user_info['check_in'],
            check_out=user_info['check_out'],
            max_hotels_number=max_hotel_count
        )
        print(hotel_list_info)
        if not hotel_list_info:
            bot.send_message(chat_id=message.chat.id,
                             text='ü§ï–ù–µ —Å–º–æ–≥ —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–µ–ª—è–º, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑')
            bot.set_state(message.chat.id, SortPrice.start)
            bot.send_message(chat_id=message.chat.id,
                             text='–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')

        else:
            try:
                for hotel in hotel_list_info[:hotel_count]:
                    text: str = hotel_description(hotel)
                    print(hotel)
                    if user_info['photo_count'] == 0:
                        bot.send_message(chat_id=message.chat.id,
                                         text=text,
                                         disable_web_page_preview=True,
                                         reply_markup=hotel_link(hotel['url']))

                    else:
                        bot.send_chat_action(message.chat.id, 'upload_photo')
                        photos: list = api_get_photo(hotel['id'], user_info['photo_count'])
                        print(photos)

                        if not photos:
                            bot.send_message(chat_id=message.chat.id,
                                             text='–£ –æ—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
                            bot.send_message(chat_id=message.chat.id,
                                             text=text,
                                             disable_web_page_preview=True,
                                             reply_markup=hotel_link(hotel['url']))
                        else:
                            media: list = []
                            for element in photos:
                                if len(media) == 0:
                                    media.append(InputMediaPhoto(element, text))
                                else:
                                    media.append(InputMediaPhoto(element))

                            bot.send_media_group(message.chat.id, media)

            except Exception as ex:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ - {ex}')
                bot.send_message(chat_id=message.chat.id,
                                 text='ü§¨–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞')
                bot.set_state(message.chat.id, SortPrice.start)
                bot.send_message(chat_id=message.chat.id,
                                 text='–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
    except Exception as ex:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - {ex}')
        bot.send_message(chat_id=message.chat.id,
                         text='ü§¨–ù–µ —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞–∂–º–∏—Ç–µ /help')
        bot.set_state(message.chat.id, SortPrice.start)
        bot.send_message(chat_id=message.chat.id,
                         text='–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')